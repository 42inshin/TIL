{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{406:function(t,s,a){\"use strict\";a.r(s);var n=a(45),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"_1-학습-날짜\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-학습-날짜\"}},[t._v(\"#\")]),t._v(\" 1. 학습 날짜\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"2020-12-09(수)\\n\"),a(\"br\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_2-학습-시간\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-학습-시간\"}},[t._v(\"#\")]),t._v(\" 2. 학습 시간\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"00:00 ~ 05:00 (집)\")]),t._v(\" \"),a(\"li\",[t._v(\"12:00 ~ 19:00 (집)\\n\"),a(\"br\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_3-학습-범위-및-주제\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-학습-범위-및-주제\"}},[t._v(\"#\")]),t._v(\" 3. 학습 범위 및 주제\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"GNL 코딩.\\n\"),a(\"br\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_4-동료-학습-방법\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-동료-학습-방법\"}},[t._v(\"#\")]),t._v(\" 4. 동료 학습 방법\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"kyukim\")]),t._v(\" 과 슬랙 화면공유를 통해 gnl 구조의 문제점 파악.\\n\"),a(\"br\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_5-학습-목표\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-학습-목표\"}},[t._v(\"#\")]),t._v(\" 5. 학습 목표\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"GNL 구조를 생각하며 코드를 구성해보자.\\n\"),a(\"br\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_6-상세-학습-내용\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-상세-학습-내용\"}},[t._v(\"#\")]),t._v(\" 6. 상세 학습 내용\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"실제 코딩 시간 : 총 8시간.\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"코드-구현\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#코드-구현\"}},[t._v(\"#\")]),t._v(\" 코드 구현\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get_next_line\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"line\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"save\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"FD_MAX\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\"\\t\\tbuf\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"BUFFER_SIZE \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\"\\t\\t\\tread_size\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"nl_ptr\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"tmp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fd \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\" line \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\" BUFFER_SIZE \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ERROR\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tnl_ptr \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 버퍼에 텍스트 읽고, read_size 갱신하고 널문자 처리.\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// '\\\\n' 을 만나는 처리해줘야함.\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"read_size \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"read\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" buf\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" BUFFER_SIZE\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\tbuf\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"read_size\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'\\\\0'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 문자열 끝 처리\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// newline 확인\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"nl_ptr \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ft_strchr\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"buf\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'\\\\n'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\\t\\tsave\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ft_strjoin\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"save\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" buf\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// '\\\\n'이 없다면 buf를 메모리할당하여 save에 저장.\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\"\\n\\t\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"break\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// newline 만난다면 buf~\\\\n까지 malloc 하고 line과 연결함.\")]),t._v(\"\\n\\t\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// newline 만났으니 while 문 종료. nl_ptr만 기억하면 될듯.\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"read_size \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ERROR\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 빈 문서를 읽어왔다면,\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// buf 시작부터 \\\\n 까지 tmp에 넣어서 save[fd]에 합치자.\")]),t._v(\"\\n\\ttmp \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ft_substr\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"buf\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"nl_ptr \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" buf\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tsave\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ft_strjoin\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"save\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" tmp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"nl_ptr \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// newline이 있었다면 다음줄로 넘어가자.\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"line \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ft_strdup\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"save\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"free\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"save\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tsave\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ft_substr\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"nl_ptr\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"READ_OK\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"save\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// newline 없고 종료될 경우,\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"line \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" save\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tsave\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"line \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ft_strdup\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"END\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"리턴값\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#리턴값\"}},[t._v(\"#\")]),t._v(\" 리턴값\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"1: 1라인을 읽었다.\")]),t._v(\" \"),a(\"li\",[t._v(\"0: 끝까지 읽었다.\")]),t._v(\" \"),a(\"li\",[t._v(\"-1: 오류가 났다.\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"gnl-동작-순서\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gnl-동작-순서\"}},[t._v(\"#\")]),t._v(\" gnl 동작 순서\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"open 을 통해 읽은 “file.txt”을 fd 에 담는다.\")]),t._v(\" \"),a(\"li\",[t._v(\"만약에 fd 가 지정되지 않는 상황 예외 처리.\")]),t._v(\" \"),a(\"li\",[t._v(\"read 함수를 통해서 fd를 버퍼 사이즈 만큼 buf 에 읽는다. \"),a(\"code\",[t._v(\"buf[buf_size]\")])]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"buf\")]),t._v(\"를 \"),a(\"code\",[t._v(\"static\")]),t._v(\" 변수인 \"),a(\"code\",[t._v(\"save\")]),t._v(\"에 담는다.\")]),t._v(\" \"),a(\"li\",[t._v(\"만약 버퍼에서 \"),a(\"code\",[t._v(\"\\\\n\")]),t._v(\" 을 만났다면 \"),a(\"code\",[t._v(\"save\")]),t._v(\"에  \"),a(\"code\",[t._v(\"\\\\n\")]),t._v(\" 앞까지 버퍼를 담아 \"),a(\"code\",[t._v(\"line\")]),t._v(\" 에 연결해주고, \"),a(\"code\",[t._v(\"\\\\n\")]),t._v(\" 뒤부터는 다시 static 변수인 \"),a(\"code\",[t._v(\"save\")]),t._v(\" 에 담아준다. 그리고 gnl이 다시 실행될 수 있도록 \"),a(\"code\",[t._v(\"1\")]),t._v(\"을 반환한다.\")]),t._v(\" \"),a(\"li\",[t._v(\"만약 \"),a(\"code\",[t._v(\"\\\\n\")]),t._v(\" 을 못 만났다면 3번으로 돌아가서 \"),a(\"code\",[t._v(\"save\")]),t._v(\"에 합쳐준다.\")]),t._v(\" \"),a(\"li\",[t._v(\"read 에서 EOF에 도달한 경우, save[fd] 안 \"),a(\"code\",[t._v(\"\\\\n\")]),t._v(\"의 여부에 따라 gnl의 리턴 값이 달라진다.\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"개행-문자-처리-과정\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#개행-문자-처리-과정\"}},[t._v(\"#\")]),t._v(\" 개행 문자 처리 과정\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"\\\\n 을 만났다.\\n\"),a(\"ul\",[a(\"li\",[t._v(\"\\\\n 전까지를 새로 메모리할당 후 저장해서 \"),a(\"code\",[t._v(\"line\")]),t._v(\" 에 넣어줌\")]),t._v(\" \"),a(\"li\",[t._v(\"\\\\n 뒤에부터의 주소값은 static 변수인 \"),a(\"code\",[t._v(\"save[fd]\")]),t._v(\" 저장.\")])])]),t._v(\" \"),a(\"li\",[t._v(\"\\\\n 을 안만났다.\\n\"),a(\"ul\",[a(\"li\",[t._v(\"줄이 아직 남아있다. -> \"),a(\"code\",[t._v(\"save[fd] = strjoin(buff);\")])]),t._v(\" \"),a(\"li\",[t._v(\"줄이 끝났다. buf -> \"),a(\"code\",[t._v(\"*line = save[fd];\")])])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"문제점\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#문제점\"}},[t._v(\"#\")]),t._v(\" 문제점\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"버퍼에 개행문자가 존재하면 save[fd]에 담지 않고, 이후에 처리를 해주었는데 만드는 과정에서 계속 오류가 나는 상황이 발생한다.\")]),t._v(\" \"),a(\"li\",[t._v(\"메모리 누수에 관한 처리를 제대로 하지 않아 메모리 누수가 발생한다.\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"필요한-함수\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#필요한-함수\"}},[t._v(\"#\")]),t._v(\" 필요한 함수\")]),t._v(\" \"),a(\"p\",[t._v(\"strchr : \\\\n 과 만나는거 검사\\nstrjoin : 기존의 문자열 뒤에 이어주기 (malloc)\\nstrdup: 아무것도 없는 경우 문자열 생성 (malloc)\\nstrlen: 문자열 길이 확인\\nsubstr: 개행부분 앞 뒤 처리할때 사용.\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"file-descriptors-의-max-값-확인-방법\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#file-descriptors-의-max-값-확인-방법\"}},[t._v(\"#\")]),t._v(\" file descriptors 의 max 값 확인 방법\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"$ ulimit -a   // 기본값 확인(Soft limit)\"),a(\"br\"),t._v(\"\\n$ ulimit -aH   // 최대값 확인 (Hard limit)\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"fd-max-값\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fd-max-값\"}},[t._v(\"#\")]),t._v(\" FD_MAX 값\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"#include <limits.h>\")]),t._v(\" 선언 > \"),a(\"code\",[t._v(\"“OPEN_MAX”\")])]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"_7-학습-내용에-대한-개인적인-총평\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-학습-내용에-대한-개인적인-총평\"}},[t._v(\"#\")]),t._v(\" 7. 학습 내용에 대한 개인적인 총평\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"오류를 수정하면서 코드에 대한 이해도가 더 올라갔다. 처음에 gnl 동작방법에 대해서 생각했던 부분들에서 논리적으로 오류가 나는 부분들이 있었고, 계속해서 주석을 달아가면서 구현을 해보았다.\")]),t._v(\" \"),a(\"li\",[t._v(\"생각하는 것과 구현하는 부분에 있어서 아직까지 속도가 나지 않아서 답답하기도 하고, 방금까지 생각했던 부분들을 기억하지 못해서 다시금 멍해지는 경우가 종종있었다. 작업을 하면서 계속해서 주석을 달아서 생각하고 있는 부분을 기록하는 것이 중요하다는 사실을 느꼈다.\")]),t._v(\" \"),a(\"li\",[t._v(\"앞으로 printf 부터 계속 코드 길이가 길어질텐데, 코드 읽는 속도가 늘 수 있도록 계속 익숙해지도록 읽어나가고 기록하자.\")]),t._v(\" \"),a(\"li\",[t._v(\"경열님과 슬랙콜을 통해서 함께 gnl 코드 오류 수정을 했다.\")]),t._v(\" \"),a(\"li\",[t._v(\"처음 save를 초기화하는 코드가 들어가있었는데 그때문에 다시 gnl이 실행 될때마다 담겨있던 save의 주소값을 잃어버려 메모리 누수와 값이 제대로 나오지 않는 문제가 있었다. 한참을 이유를 못찾다가 결국 그 코드를 제거하니 당장의 문제가 해결되었다. 간단하지만 논리적 오류를 범했을때 코드가 제대로 동작하지 않는 경우, 오류를 찾기 너무나도 힘들었다. 이러한 상황을 항상 조심하려면 전반적인 구조를 완전히 이해하면서 코드를 짜야하는데, 코드를 짜면서 구조를 다시 잡아가는 경우가 많기 때문에 알고리즘의 실수를 최소화 하기 위해서 계속해서 코드를 복기해봐야 할 것 같다.\\n\"),a(\"br\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_8-다음-학습-계획\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-다음-학습-계획\"}},[t._v(\"#\")]),t._v(\" 8. 다음 학습 계획\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"GNL 오류 수정.\")]),t._v(\" \"),a(\"li\",[t._v(\"printf 초기 구현.\\n\"),a(\"br\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_9-참고-링크\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-참고-링크\"}},[t._v(\"#\")]),t._v(\" 9. 참고 링크\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[a(\"a\",{attrs:{href:\"https://www.cyberciti.biz/faq/linux-increase-the-maximum-number-of-open-files/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"fd max 확인 방법\"),a(\"OutboundLink\")],1),t._v(\" \"),a(\"br\")])])])}),[],!1,null,null,null);s.default=r.exports}}]);","extractedComments":[]}