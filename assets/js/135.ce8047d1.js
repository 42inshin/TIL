(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{489:function(t,s,a){"use strict";a.r(s);var n=a(45),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_2021-04-13-화"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2021-04-13-화"}},[t._v("#")]),t._v(" 2021-04-13(화)")]),t._v(" "),a("h2",{attrs:{id:"_1-학습-날짜"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-학습-날짜"}},[t._v("#")]),t._v(" 1. 학습 날짜")]),t._v(" "),a("ul",[a("li",[t._v("2021-04-13(화)\n"),a("br")])]),t._v(" "),a("h2",{attrs:{id:"_2-학습-시간"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-학습-시간"}},[t._v("#")]),t._v(" 2. 학습 시간")]),t._v(" "),a("ul",[a("li",[t._v("12:00 ~ 14:00 (집)")]),t._v(" "),a("li",[t._v("19:00 ~ 23:00 (집)\n"),a("br")])]),t._v(" "),a("h2",{attrs:{id:"_3-학습-범위-및-주제"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-학습-범위-및-주제"}},[t._v("#")]),t._v(" 3. 학습 범위 및 주제")]),t._v(" "),a("ul",[a("li",[t._v("push_swap\n"),a("br")])]),t._v(" "),a("h2",{attrs:{id:"_4-동료-학습-방법"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-동료-학습-방법"}},[t._v("#")]),t._v(" 4. 동료 학습 방법")]),t._v(" "),a("ul",[a("li",[t._v("해당사항없음.\n"),a("br")])]),t._v(" "),a("h2",{attrs:{id:"_5-학습-목표"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-학습-목표"}},[t._v("#")]),t._v(" 5. 학습 목표")]),t._v(" "),a("ul",[a("li",[t._v("push_swap 에 필요한 정렬 알고리즘에 대해 학습하자.\n"),a("br")])]),t._v(" "),a("h2",{attrs:{id:"_6-상세-학습-내용"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-상세-학습-내용"}},[t._v("#")]),t._v(" 6. 상세 학습 내용")]),t._v(" "),a("blockquote",[a("p",[t._v("실제 코딩 시간 : 총 0시간.")])]),t._v(" "),a("h2",{attrs:{id:"정렬-알고리즘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#정렬-알고리즘"}},[t._v("#")]),t._v(" 정렬 알고리즘")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://namu.wiki/w/%EC%A0%95%EB%A0%AC%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98",target:"_blank",rel:"noopener noreferrer"}},[t._v("정렬 알고리즘 링크 바로가기"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://ko.wikipedia.org/wiki/%ED%95%A9%EB%B3%91_%EC%A0%95%EB%A0%AC",target:"_blank",rel:"noopener noreferrer"}},[t._v("합병 정렬 - 위키백과, 우리 모두의 백과사전"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://ko.wikipedia.org/wiki/%ED%80%B5_%EC%A0%95%EB%A0%AC",target:"_blank",rel:"noopener noreferrer"}},[t._v("퀵 정렬 - 위키백과, 우리 모두의 백과사전"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"정렬이-필요한-이유"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#정렬이-필요한-이유"}},[t._v("#")]),t._v(" 정렬이 필요한 이유")]),t._v(" "),a("p",[t._v("컴퓨터에서 데이터 정렬이 필요한 이유는 "),a("strong",[t._v("탐색")]),t._v("을 위해서이다.")]),t._v(" "),a("p",[t._v("탐색할 대상이 정렬되어 있지 않다면 "),a("code",[t._v("순차 탐색")]),t._v(" 이외에 다른 알고리즘을 사용할 수 없다.")]),t._v(" "),a("p",[a("strong",[t._v("데이터가 정렬되어 있다면")]),t._v(" "),a("a",{attrs:{href:"https://namu.wiki/w/%EC%9D%B4%EC%A7%84%20%ED%83%90%EC%83%89",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("이진 탐색")]),a("OutboundLink")],1),t._v("이라는 강력한 알고리즘을 사용할 수 있다.")]),t._v(" "),a("blockquote",[a("p",[t._v("이진탐색 의 예시")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d03518b3-4f9f-4a40-808f-41381fad9dd6/Untitled.png",alt:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d03518b3-4f9f-4a40-808f-41381fad9dd6/Untitled.png"}})]),t._v(" "),a("p",[t._v("이진 탐색 알고리즘은 최악의 경우라도 "),a("code",[t._v("log(n)")]),t._v("의 성능을 보이는데 예를 들어 43억 개의 정렬된 자료가 들어있는 데이터에서 어떤 값을 찾아야 할 때 최악의 비교 횟수(찾는 값이 없는 경우)는 겨우 32회에 불과하다.")]),t._v(" "),a("p",[a("strong",[t._v("컴퓨터에서 정렬을 수행하는 이유 중 가장 큰 이유가 바로 이 "),a("code",[t._v("이진탐색")]),t._v("이 가능한 데이터를 만들기 위해서이다.")])]),t._v(" "),a("h2",{attrs:{id:"대표적인-정렬의-종류"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#대표적인-정렬의-종류"}},[t._v("#")]),t._v(" 대표적인 정렬의 종류")]),t._v(" "),a("p",[t._v("실제 응용에서는 상황에 따라 두 가지 이상의 정렬 방법을 사용하는 경우가 많다. 예를 들면, 정렬 대상이 특정 크기 이하로 단편화될 때 까지는 "),a("code",[t._v("퀵정렬")]),t._v("을 쓰다가, 그 특정 크기 이하가 됐을 때에는 작은 규모에서 강점을 보이는 "),a("code",[t._v("삽입정렬")]),t._v("을 쓴다거나. 혹은 특정 횟수 이상 재귀호출이 발생하면 "),a("code",[t._v("O(nlg(n))")]),t._v("이 보장되는 "),a("code",[t._v("힙정렬")]),t._v("을 쓴다거나.")]),t._v(" "),a("h3",{attrs:{id:"o-n-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#o-n-2"}},[t._v("#")]),t._v(" O($n^2$)")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("버블정렬")]),t._v(" : 양 옆의 값을 비교해서 정렬하는 것을 반복")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bubble_Sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("칵테일 정렬 : 홀수 번째는 앞부터, 짝수 번째는 뒤부터 훑는 정렬")]),t._v(" "),a("li",[t._v("콤브 정렬 : 대상을 중간에 치환하면서 간격을 좁혀 정렬하는 방식, 마치 닭벼슬을 닮아서 붙은 이름")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("선택 정렬")]),t._v(" : 매번 가장 작은 값을 찾아 정렬")]),t._v(" "),a("ul",[a("li",[t._v("이중 선택 정렬 : 양쪽에 가장 작은 값, 가장 큰 큰 값을 정렬하는 방식")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("삽입 정렬")]),t._v(" : k번째 원소를 1부터 k-1까지와 비교해 적절한 위치에 끼워넣고 그 뒤의 자료를 한 칸씩 뒤로 밀어내는 방식. 배열이 작을 경우에 역시 상당히 효율적이다.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<vector>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertionSort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("이진 삽입 정렬 : 이진 탐색을 황용해 새로운 원소가 위치할 곳을 미리 찾아서 정렬하는 방식")])])])]),t._v(" "),a("h3",{attrs:{id:"o-n-logn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#o-n-logn"}},[t._v("#")]),t._v(" O($n logn$)")]),t._v(" "),a("p",[t._v("최악의 상황에서도 "),a("code",[t._v("병합정렬")]),t._v("이나 "),a("code",[t._v("힙정렬")]),t._v("은 O($nlogn$)을 유지하는 반면 순수한 "),a("code",[t._v("퀵정렬")]),t._v("은 오히려 O($n^2$) 으로 뒤진다. 하지만 실제로는  O($nlogn$)일때는 "),a("code",[t._v("퀵정렬")]),t._v("이 보통 제일 빨라서 퀵정렬을 조금 개량해서 최악의 경우가 (거의) 발생하지 않도록 코드를 짜거나 나쁜 경우다 싶으면 "),a("code",[t._v("힙정렬")]),t._v("로 전환하게끔 코드를 짠다.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("병합정렬")]),t._v(" : 원소 개수가 1 또는 0이 될 때까지 두 부분으로 쪼갠 후 자른 순서의 역순으로 크기를 비교해 병합.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8c98626e-8bd6-498d-9b94-911957751ff6/Untitled.png",alt:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8c98626e-8bd6-498d-9b94-911957751ff6/Untitled.png"}})]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("힙정렬")]),t._v(" :")]),t._v(" "),a("ol",[a("li",[t._v("원소들을 전부 힙에 삽입한다.")]),t._v(" "),a("li",[t._v("힙의 루트에 있는 값은 남은 수들 중에서 최솟값(혹은 최댓값)을 가지므로 루트를 출력하고 힙에서 제거한다.")]),t._v(" "),a("li",[t._v("힙이 빌 때까지 2의 과정을 반복한다.")])]),t._v(" "),a("p",[t._v("힙정렬은 추가적인 메모리를 전혀 필요로 하지 않는다는 점과, 최악의 경우에 O($n^2$)의 성능을 내는 퀵정렬과 달리 항상 O($nlogn$) 정렬의 성능을 발휘하는 장점이 있다. 하지만 실제 코드를 짜서 비교를 해 보면 퀵정렬이 힙정렬보다 일반적인 경우에 빠르게 동작한다")]),t._v(" "),a("p",[t._v("퀵 정렬의 경우는 대개 원소들끼리 근접한 메모리 영역에 붙어 있는 배열을 사용하기 때문에 일반적으로 캐시 친화적이지만 힙정렬의 원소들은 좀 더 흩어져 있는 경우가 많아서 캐시 친화도가 떨어지는 문제가 있다. 또한 힙정렬은 일반적으로 포인터 연산을 많이 사용하기 때문에 거기에 걸리는 오버헤드도 무시할 수는 없는 수준")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("퀵정렬")]),t._v(" : 원소 하나를 기준(피벗, pivot)으로 삼아 그보다 작은 것을 앞으로 빼내고 그 뒤에 피벗을 옮겨 피벗보다 작은 것, 큰 것으로 나눈뒤 나누어진 각각에서 다시 피벗을 잡고 정렬해서 각각의 크기가 0이나 1이 될 때까지 정렬한다. 퀵 정렬은 partition step을 어떻게 하느냐에 따라 바리에이션이 매우 많으며, 성능 차이도 날 수 있다.")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1c121ac3-a91a-4825-87b8-3dc869c29f50/Untitled.png",alt:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1c121ac3-a91a-4825-87b8-3dc869c29f50/Untitled.png"}})]),t._v(" "),a("h2",{attrs:{id:"퀵정렬에-대한-자세한-설명"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#퀵정렬에-대한-자세한-설명"}},[t._v("#")]),t._v(" 퀵정렬에 대한 자세한 설명")]),t._v(" "),a("p",[t._v("퀵정렬 이해에 도움되는 링크 : "),a("a",{attrs:{href:"https://prosto.tistory.com/177",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://prosto.tistory.com/177"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"퀵정렬-용어"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#퀵정렬-용어"}},[t._v("#")]),t._v(" 퀵정렬 용어")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("분할(Divide)")]),t._v(" : 정렬할 자료들을 기준 값(Pivot)을 중심으로 좌, 우 2개의 부분집합으로 나누는 것")]),t._v(" "),a("li",[a("code",[t._v("정복(Conquer)")]),t._v(" : 부분집합의 원소들 중에서 기준 값보다 작은 원소들은 왼쪽, 큰 원소들은 오른쪽 부분집합으로 정렬하는 과정.")]),t._v(" "),a("li",[a("code",[t._v("피봇(Pivot)")]),t._v(" : 기준 값(일반적으로 전체 원소 중 가운데에 위치한 원소)")]),t._v(" "),a("li",[a("code",[t._v("L")]),t._v(" : 왼쪽에서 오른쪽으로 움직이며 피봇 이상인 원소를 찾아 L로 지정")]),t._v(" "),a("li",[a("code",[t._v("R")]),t._v(" :  오른쪽에서 왼쪽으로 움직이며 피봇보다 작은 원소를 찾아 R로 지정\n"),a("ul",[a("li",[t._v("R은 L과 만나면 더 이상 왼쪽으로 이동하지 않음!")])])])]),t._v(" "),a("h3",{attrs:{id:"퀵정렬-순서"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#퀵정렬-순서"}},[t._v("#")]),t._v(" 퀵정렬 순서")]),t._v(" "),a("ol",[a("li",[t._v("무작위로 나열된 숫자의 중간 위치의 값을 "),a("strong",[t._v("피벗")]),t._v("으로 두자")]),t._v(" "),a("li",[t._v("맨 왼쪽, 맨 오른쪽을 가리키는 포인터를 두자.")]),t._v(" "),a("li",[t._v("피벗의 값과 왼쪽, 오른쪽 값을 비교한다. (피벗은 제외)\n"),a("ol",[a("li",[a("code",[t._v("if (L_value > Pivot && R_value < Pivot): swap(L_value, R_value)")]),t._v("\n피벗 값과 왼쪽 오른쪽을 비교해서 위의 경우에 해당하면 왼쪽, 오른쪽 값을 "),a("strong",[t._v("swap")]),t._v(" 한다.")]),t._v(" "),a("li",[t._v("만약 한 경우만 true 인 경우, 옆 칸(L: 오른쪽 방향, R: 왼쪽 방향)으로 이동해, 해당 index의 값과 비교해 3-1 을 실행한다.")]),t._v(" "),a("li",[t._v("같은 위치로 L, R 이 만난 경우, 즉 L, R의 index가 같은 경우에는 "),a("strong",[t._v("피벗")]),t._v("과 "),a("strong",[t._v("swap")]),t._v("  한다.\n"),a("br")])])])]),t._v(" "),a("h2",{attrs:{id:"_7-학습-내용에-대한-개인적인-총평"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-학습-내용에-대한-개인적인-총평"}},[t._v("#")]),t._v(" 7. 학습 내용에 대한 개인적인 총평")]),t._v(" "),a("ul",[a("li",[t._v("정렬 알고리즘이 필요한 이유와 정렬 알고리즘의 종류에 대해서 알아보았다. 주로 가장 성능이 좋은 것을 뽑을 때, 퀵 정렬을 뽑는데 push_swap 을 만드는 경우에도 퀵 정렬을 구현하여 정렬 방식을 만들어야 될 것 같다.")]),t._v(" "),a("li",[t._v("주는 시간에 비해서 생각보다 많이 어려운 과제인것 같다는 생각이 든다.\n"),a("br")])]),t._v(" "),a("h2",{attrs:{id:"_8-다음-학습-계획"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-다음-학습-계획"}},[t._v("#")]),t._v(" 8. 다음 학습 계획")]),t._v(" "),a("ul",[a("li",[t._v("check.c 기본 틀 작성\n"),a("br")])]),t._v(" "),a("h2",{attrs:{id:"_9-참고-링크"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-참고-링크"}},[t._v("#")]),t._v(" 9. 참고 링크")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.notion.so/8deff343f4a240e89fd3a5d80a3ee688",target:"_blank",rel:"noopener noreferrer"}},[t._v("Notion - 정렬 알고리즘"),a("OutboundLink")],1),t._v(" "),a("br")])])])}),[],!1,null,null,null);s.default=r.exports}}]);